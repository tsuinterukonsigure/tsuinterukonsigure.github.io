<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【算法】非典型牛顿迭代法</title>
      <link href="/2020/01/31/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
      <url>/2020/01/31/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="何为牛顿迭代法"><a href="#何为牛顿迭代法" class="headerlink" title="何为牛顿迭代法"></a>何为牛顿迭代法</h3><p>​        牛顿迭代法的全名叫做<strong>牛顿-拉夫森方法（Newton-Raphson method）</strong>，这是一种在实数域和复数域上近似求解方程的方法。方法使用函数$f(x)$的<a href="https://www.wikiwand.com/zh/泰勒级数" target="_blank" rel="noopener">泰勒级数</a>的前面几项来寻找方程$f(y) = 0$的根。</p><p>​        对于一般的形如$f(x) = 0$的方程，首先任意估算一个解$x_1$，一般来说此时不能得到方程的正确解，则我们在方程曲线上$x=x_1$处作$f(x)$的切线，与x轴相交于点$(x_2,0)$，此时$x_2$要更加接近于方程$f(x)=0$的解了。只要以此方式不断地更新$x_{n+1}$，就能无限接近于方程的精确解。</p><p><img src="https://github.com/tsuinterukonsigure/blogpics/blob/master/202001/newton1.gif?raw=true" alt="newton"></p><p>​        值得注意的是，该方法在<strong>函数不连续</strong>或者<strong>函数有多个零点</strong>的时候会失效。</p><hr><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>​        牛顿迭代法多用于以最快速度求一个数字$m$的<strong>方根</strong>，仅需几次的迭代就能够得到非常精确的结果，下面举例来介绍牛顿迭代法<strong>求平方根的数学公式和实现</strong>。</p><p>​        不妨令$x^m=n$，则方程为$f(x) = x^m-n$.</p><p>​        有</p><script type="math/tex; mode=display">f'(x)=mx^{m-1}</script><script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}=(1-m)x_n+\frac{nx_n}{mx_n^m}</script><p>​        假设我们输入一个数字$n$，我们现在需要求它的平方根$x$，则</p><script type="math/tex; mode=display">f(x)=x^2-n</script><script type="math/tex; mode=display">f'(x)=2x</script><script type="math/tex; mode=display">x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}=\frac12(x_n+\frac{n}{x_n})</script><p>​        则我们的迭代方程就是$x_{n+1}=\frac{x_n}{2}+\frac{n}{2x_n}$。</p><p>​        现在要确定的是迭代终止条件，假设我们要求的精度是0.00001，则迭代终止的条件为$|x^2-n|&lt;0.00001$。</p><p>​        由于$x=0$的时候，$n$的值就为0，所以我们将迭代的起点设置为$x=1$，所以我们的程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">Class Solution &#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//特殊值返回</span></span><br><span class="line">    <span class="keyword">double</span> x0, x1, range;</span><br><span class="line">    x0 = <span class="number">1.0</span>; <span class="comment">//迭代起点</span></span><br><span class="line">    range = <span class="built_in">fabs</span>(x0 * x0 - n); <span class="comment">//|x^2-n|的值，用于终止迭代</span></span><br><span class="line">    <span class="keyword">while</span>(range &gt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">        x1 = x0/<span class="number">2</span> + n/(<span class="number">2</span>*x0); <span class="comment">//迭代方程</span></span><br><span class="line">        x0 = x1;</span><br><span class="line">        range = <span class="built_in">fabs</span>(x1 * x1 - n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution* sol = <span class="keyword">new</span> Solution();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = sol-&gt;mySqrt(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        当我们输入的值为<strong>2147395599</strong>时，输出<strong>46339.99995</strong>，耗时几乎为0ms。而C++自带的<code>sqrt()</code>函数耗时8ms。</p><hr><h3 id="非典型算法"><a href="#非典型算法" class="headerlink" title="非典型算法"></a>非典型算法</h3><p>​        这里不得不提到神秘数字<strong>0x5f3759df</strong>，这个数字首次出现在游戏《雷神之锤III》的源代码中。</p><p>​        在一个名为<code>q_math.c</code>的文件里出现了如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Q_rsqrt</span><span class="params">( <span class="keyword">float</span> number )</span> </span>&#123; </span><br><span class="line">   <span class="keyword">long</span> i; <span class="keyword">float</span> x2, y; <span class="keyword">const</span> <span class="keyword">float</span> threehalfs = <span class="number">1.5F</span>;</span><br><span class="line">    x2 = number * <span class="number">0.5F</span>; </span><br><span class="line">    y = number; </span><br><span class="line">    i = * ( <span class="keyword">long</span> * ) &amp;y; <span class="comment">// evil floating point bit level hacking </span></span><br><span class="line">    i = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> ); <span class="comment">// what the fuck? </span></span><br><span class="line">    y = * ( <span class="keyword">float</span> * ) &amp;i; </span><br><span class="line">    y = y * ( threehalfs - ( x2 * y * y ) ); <span class="comment">// 1st iteration </span></span><br><span class="line">    <span class="comment">// y = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this can be removed</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> Q3_VM #</span></span><br><span class="line">    <span class="function">ifdef __linux__ <span class="title">assert</span><span class="params">( !isnan(y) )</span></span>; <span class="comment">// bk010122 - FPE?</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> return y; </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​        里面出现了一句让人抓毛的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> ); <span class="comment">// what the fuck?</span></span><br></pre></td></tr></table></figure><p>​        这句代码和下面的两行一起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> ); <span class="comment">// what the fuck? </span></span><br><span class="line">y = * ( <span class="keyword">float</span> * ) &amp;i; </span><br><span class="line">y = y * ( threehalfs - ( x2 * y * y ) ); <span class="comment">// 1st iteration</span></span><br></pre></td></tr></table></figure><p>​        就相当于求平方根的操作。</p><p>​        但其中的原理是什么，答案恐怕连写这个代码的人自己也不知道。（what the f*ck?）</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>【1】<a href="https://www.wikiwand.com/zh/牛顿法" target="_blank" rel="noopener">维基百科：牛顿法</a></p><p>【2】<a href="https://leetcode-cn.com/problems/sqrtx/submissions/" target="_blank" rel="noopener">力扣题目：求平方根</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛顿迭代法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 个人学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【资源】Adobe Illustrator 2020破解版（附带教程）</title>
      <link href="/2020/01/30/%E3%80%90%E8%B5%84%E6%BA%90%E3%80%91Adobe%20Illustrator%202020%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%88%E9%99%84%E5%B8%A6%E6%95%99%E7%A8%8B%EF%BC%89/"/>
      <url>/2020/01/30/%E3%80%90%E8%B5%84%E6%BA%90%E3%80%91Adobe%20Illustrator%202020%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%88%E9%99%84%E5%B8%A6%E6%95%99%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>​        <em>本压缩包内的Adobe Illustrator已经破解，无需二次破解。</em></p><hr><p>​        首先前往<a href="https://pan.baidu.com/s/1Y6E-FDUDqShbzm7uZQH0Aw" target="_blank" rel="noopener">百度网盘链接</a>下载，提取码为<code>5wko</code>。（链接若失效请在评论区留言提醒）</p><p>​        下载完成后解压缩，一定要<strong>先阅读readme文件</strong>里的内容，以免在接下来的使用中出现未知的问题。</p><p><img src="https://github.com/tsuinterukonsigure/blogpics/blob/master/202001/illustrator1.png?raw=true" alt="安装"></p><p>​        双击<strong>Set-up.exe</strong>，进行安装。安装过程可以联网进行（毕竟已经破解过了）。打开后“继续”即可，安装中途可能会要求你登录Creative Cloud账户，直接前往<a href="https://www.adobe.com/cn/creativecloud/catalog/desktop.html" target="_blank" rel="noopener">官网注册</a>。</p><p><img src="https://github.com/tsuinterukonsigure/blogpics/blob/master/202001/illustrator2.png?raw=true" alt="安装界面"></p><p>​        等待安装完成即可。</p><h3 id="二、issues"><a href="#二、issues" class="headerlink" title="二、issues"></a>二、issues</h3><p>​    ● 打开后直接闪退的问题</p><p>​        在 <code>根目录/support files/Contents/Windows</code> 中，找到<strong>Illustrator_Original.exe</strong>，打开后登录到你的creative cloud账户即可，之后就可以直接从Illustrator.exe打开了。</p><p><img src="https://github.com/tsuinterukonsigure/blogpics/blob/master/202001/illustrator3.png?raw=true" alt="original"></p><p>​        需要额外说明的是，如果在断网的状态下打开Illustrator.exe，即便你之前在Original中登录过，也会出现闪退现象，这和Illustrator 2020最新的检验机制有关。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 资源类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件资源 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
